#@ load("@ytt:data", "data")

apiVersion: elasticsearch.k8s.elastic.co/v1beta1
kind: Elasticsearch
metadata:
  name: #@ data.values.cluster_name
spec:
  version: #@ data.values.version
  #! Custom image with repository-s3 and discovery-ec2 plugins installed on top of the official Elastic image.
  #! Github link: https://github.com/SymphonyOSF/ElasticsearchKubernetes/blob/master/Dockerfile.elastic
  image: #@ data.values.image
  nodeSets:
    - name: master
      count: #@ int(int(data.values.node_configuration.master.count))
      volumeClaimTemplates:
        - metadata:
            #!           Name must always be elasticsearch-data
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: #@ data.values.node_configuration.master.storage_size
            storageClassName: gp2
      config:
        node.master: true
        node.data: false
        node.ingest: false
        node.ml: false
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        metadata:
          labels:
            sym-node-type: #@ str(data.values.cluster_name) +"-master-node"
        spec:
          affinity:
            podAntiAffinity: #! Pod affinity guarantees a single pod per node
              requiredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        elasticsearch.k8s.elastic.co/cluster-name: #@ data.values.cluster_name
                  topologyKey: kubernetes.io/hostname
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
          nodeSelector:
            beta.kubernetes.io/instance-type: c5.large
          containers:
            - name: elasticsearch
              imagePullPolicy: Always
              resources:
                requests:
                  memory: 3Gi
                  cpu: 1
                limits:
                  memory: 3.45Gi
                  cpu: 2
    #@ for data_group in data.values.node_configuration.data:
    - name: #@ "data-"+ str(data_group.zone_name)
      count: #@ int(int(data_group.count))
      volumeClaimTemplates:
        - metadata:
            #! Name must always be elasticsearch-data
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: #@ data_group.storage_size
            storageClassName: gp2
      config:
        node.master: false
        node.data: true
        node.ingest: false
        node.ml: false
        bootstrap.memory_lock: false
        node.attr.zone: #@ data_group.zone_name
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        metadata:
          labels:
            sym-node-type: #@ str(data.values.cluster_name) +"-data-node"
        spec:
          affinity:
            podAntiAffinity: #! Pod affinity guarantees a single pod per node
              requiredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        elasticsearch.k8s.elastic.co/cluster-name: #@ data.values.cluster_name
                  topologyKey: kubernetes.io/hostname
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: failure-domain.beta.kubernetes.io/zone
                        operator: In
                        values:
                          - #@ data_group.zone_name
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
          nodeSelector:
            beta.kubernetes.io/instance-type: c5.xlarge
          containers:
            - name: elasticsearch
              imagePullPolicy: Always
              #!specify resource limits and requests
              resources:
                requests:
                  memory: 6Gi
                  cpu: 3
                limits:
                  memory: 7.45Gi
                  cpu: 4
    #@ end
  http:
    service:
      metadata:
        annotations:
          #!Must be a string
          service.beta.kubernetes.io/aws-load-balancer-extra-security-groups: #@ data.values.elb.elastic.extraSecurityGroupIds
          service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
#!         external-dns.alpha.kubernetes.io/hostname: sym-search-dev-elastic.devi.symphony.com
      spec:
        type: LoadBalancer
        selector:
          sym-node-type: #@ str(data.values.cluster_name) +"-data-node"
        loadBalancerSourceRanges: #@ data.values.elb.elastic.loadBalancerSourceRanges
    #@ if data.values.elb.elastic.tls.customCertificate:
    tls:
      certificate:
        secretName: #@ data.values.elb.elastic.tls.k8sSecretName
    #@ end
